name: Publish to PyPI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh

    - name: Create and activate virtual environment
      run: |
        uv venv
        echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv pip install -e .
        uv pip install build twine python-semantic-release

    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Release with semantic-release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        semantic-release version
        semantic-release publish

    - name: Fallback PyPI upload
      if: failure()
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "semantic-release failed, trying direct upload..."
        python -c "
        import re
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        version_match = re.search(r'version = \"(\d+)\.(\d+)\.(\d+)\"', content)
        if version_match:
            major, minor, patch = map(int, version_match.groups())
            new_version = f'{major}.{minor}.{patch + 1}'
            new_content = re.sub(r'version = \"[\d\.]+\"', f'version = \"{new_version}\"', content)
            with open('pyproject.toml', 'w') as f:
                f.write(new_content)
            print(f'Version bumped to {new_version}')
        "
        python -m build
        twine upload dist/* --verbose --skip-existing
        git add pyproject.toml
        git commit -m "chore: bump version for PyPI upload"
        git push
